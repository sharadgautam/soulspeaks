{"remainingRequest":"C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\src\\views\\BuyDids.vue?vue&type=style&index=0&id=42d45530&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\src\\views\\BuyDids.vue","mtime":1750385429801},{"path":"C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1750359541213},{"path":"C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1750359544485},{"path":"C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1750359542425},{"path":"C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1750359540488},{"path":"C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1750359543245}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouYnV5LWRpZHMtY29udGFpbmVyIHsNCiAgbWF4LXdpZHRoOiA2MDBweDsNCiAgbWFyZ2luOiA2MHB4IGF1dG87DQogIHBhZGRpbmc6IDJlbTsNCiAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsNCiAgYm9yZGVyLXJhZGl1czogOHB4Ow0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQouZGlkLWxpc3Qgew0KICBsaXN0LXN0eWxlOiBub25lOw0KICBwYWRkaW5nOiAwOw0KICBtYXJnaW46IDA7DQp9DQoubWVzc2FnZSB7DQogIGNvbG9yOiBncmVlbjsNCiAgbWFyZ2luLXRvcDogMWVtOw0KfQ0K"},{"version":3,"sources":["C:\\Users\\SHARA\\soulspeaks\\soulspeaks\\frontend\\src\\views\\BuyDids.vue"],"names":[],"mappings":";AAyGA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACX;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACjB","file":"C:/Users/SHARA/soulspeaks/soulspeaks/frontend/src/views/BuyDids.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"buy-dids-container\">\r\n    <h2>Buy DIDs</h2>\r\n    <form @submit.prevent=\"searchDids\">\r\n      <label>Country:</label>\r\n      <select v-model=\"country\">\r\n        <option value=\"US\">United States</option>\r\n      </select>\r\n      <label>Type:</label>\r\n      <select v-model=\"didType\">\r\n        <option value=\"local\">Geo (Local)</option>\r\n        <option value=\"tollfree\">Toll-Free</option>\r\n      </select>\r\n      <button type=\"submit\">Search DIDs</button>\r\n    </form>\r\n    <div v-if=\"dids.length\">\r\n      <h3>Available DIDs</h3>\r\n      <ul class=\"did-list\">\r\n        <li v-for=\"did in uniqueDids\" :key=\"did.phone_number\">\r\n          {{ formatNational(did.phone_number) }}\r\n          <button @click=\"buyDid(did.phone_number)\">Buy</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <p v-if=\"message\" class=\"message\">{{ message }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN } from '../twilio.config';\r\n\r\nexport default {\r\n  name: 'BuyDids',\r\n  data() {\r\n    return {\r\n      country: 'US',\r\n      didType: 'local',\r\n      dids: [],\r\n      message: ''\r\n    };\r\n  },\r\n  computed: {\r\n    uniqueDids() {\r\n      // Remove duplicates by phone_number\r\n      const seen = new Set();\r\n      return this.dids.filter(did => {\r\n        if (seen.has(did.phone_number)) return false;\r\n        seen.add(did.phone_number);\r\n        return true;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    formatNational(e164) {\r\n      // Only for US numbers, format as (NPA) NXX-XXXX\r\n      if (!e164.startsWith('+1') || e164.length !== 12) return e164;\r\n      const npa = e164.slice(2, 5);\r\n      const nxx = e164.slice(5, 8);\r\n      const xxxx = e164.slice(8);\r\n      return `(${npa}) ${nxx}-${xxxx}`;\r\n    },\r\n    async searchDids() {\r\n      this.message = '';\r\n      this.dids = [];\r\n      const typePath = this.didType === 'tollfree' ? 'TollFree' : 'Local';\r\n      const url = `https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/AvailablePhoneNumbers/${this.country}/${typePath}.json?SmsEnabled=true&VoiceEnabled=true&Limit=10`;\r\n      try {\r\n        const res = await axios.get(url, {\r\n          auth: {\r\n            username: TWILIO_ACCOUNT_SID,\r\n            password: TWILIO_AUTH_TOKEN\r\n          }\r\n        });\r\n        this.dids = res.data.available_phone_numbers || [];\r\n        if (!this.dids.length) this.message = 'No DIDs found.';\r\n      } catch (e) {\r\n        this.message = 'Failed to search DIDs from Twilio.';\r\n      }\r\n    },\r\n    async buyDid(phoneNumber) {\r\n      this.message = '';\r\n      const url = `https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/IncomingPhoneNumbers.json`;\r\n      try {\r\n        const res = await axios.post(url, `PhoneNumber=${encodeURIComponent(phoneNumber)}`, {\r\n          auth: {\r\n            username: TWILIO_ACCOUNT_SID,\r\n            password: TWILIO_AUTH_TOKEN\r\n          },\r\n          headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n        if (res.data.sid) {\r\n          this.message = `Successfully bought DID: ${res.data.phone_number}`;\r\n        } else {\r\n          this.message = 'Failed to buy DID.';\r\n        }\r\n      } catch (e) {\r\n        this.message = 'Failed to buy DID from Twilio.';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.buy-dids-container {\r\n  max-width: 600px;\r\n  margin: 60px auto;\r\n  padding: 2em;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n}\r\n.did-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n.message {\r\n  color: green;\r\n  margin-top: 1em;\r\n}\r\n</style> "]}]}